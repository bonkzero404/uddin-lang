// ===================================
// 10_number_theory_demo.din
// Number Theory Functions Demo
// ===================================
//
// This example demonstrates number theory functions including
// prime numbers, factorization, and mathematical sequences.

fun analyze_number(n):
    print("=== Analysis of number", n, "===")

    // Basic properties
    print("Number:", n)
    print("Absolute value:", abs(n))
    print("Sign:", sign(n))

    if (n > 0) then:
        // Factorial (for reasonable numbers)
        if (n <= 20) then:
            print("Factorial:", factorial(n))
        else:
            print("Factorial: (too large to compute)")
        end

        // Prime check
        if (is_prime(n)) then:
            print("Prime: Yes")
            print("Prime factors: [" + str(n) + "]")
        else:
            print("Prime: No")
            factors = prime_factors(n)
            print("Prime factors:", factors)

            // Count factor frequency
            factor_count = {}
            for (factor in factors):
                if (str(factor) in factor_count) then:
                    factor_count[str(factor)] = factor_count[str(factor)] + 1
                else:
                    factor_count[str(factor)] = 1
                end
            end

            print("Factor frequency:", factor_count)
        end

        // Perfect number check (sum of proper divisors equals the number)
        if (n < 100) then:  // Only check for small numbers
            divisor_sum = 1  // 1 is always a proper divisor
            for (i in range(2, n)):
                if (n % i == 0) then:
                    divisor_sum = divisor_sum + i
                end
            end

            if (divisor_sum == n and n > 1) then:
                print("Perfect number: Yes")
            else:
                print("Perfect number: No")
            end
        end
    end
end

fun generate_primes(limit):
    print("=== Prime numbers up to", limit, "===")

    primes = []
    for (num in range(2, limit + 1)):
        if (is_prime(num)) then:
            append(primes, num)
        end
    end

    print("Primes:", primes)
    print("Count:", len(primes))

    // Twin primes (primes that differ by 2)
    twin_primes = []
    for (i in range(len(primes) - 1)):
        if (primes[i + 1] - primes[i] == 2) then:
            append(twin_primes, [primes[i], primes[i + 1]])
        end
    end

    if (len(twin_primes) > 0) then:
        print("Twin primes:", twin_primes)
    end

    return primes
end

fun fibonacci_analysis(n):
    print("=== Fibonacci sequence analysis (first", n, "terms) ===")

    fib_sequence = []
    for (i in range(n)):
        append(fib_sequence, fibonacci(i))
    end

    print("Sequence:", fib_sequence)

    // Calculate ratios between consecutive terms (approaches golden ratio)
    if (n >= 3) then:
        print("Ratios (approaching golden ratio):")
        for (i in range(1, min(n - 1, 10))):  // Show first 9 ratios
            if (fib_sequence[i] != 0) then:
                ratio = fib_sequence[i + 1] / fib_sequence[i]
                print("  F(" + str(i + 1) + ")/F(" + str(i) + ") =", round(ratio, 6))
            end
        end
        print("  Golden ratio (PHI) =", PHI)
    end

    // Sum of fibonacci numbers
    fib_sum = sum(fib_sequence)
    print("Sum of first", n, "terms:", fib_sum)
end

fun gcd_lcm_demo():
    print("=== GCD and LCM demonstrations ===")

    pairs = [
        [12, 18],
        [24, 36],
        [17, 19],  // Coprime numbers
        [48, 64],
        [100, 150]
    ]

    for (pair in pairs):
        a = pair[0]
        b = pair[1]
        gcd_val = gcd(a, b)
        lcm_val = lcm(a, b)

        print("Numbers:", a, "and", b)
        print("  GCD:", gcd_val)
        print("  LCM:", lcm_val)
        print("  Product:", a * b)
        print("  GCD Ã— LCM:", gcd_val * lcm_val)

        if (gcd_val == 1) then:
            print("  Relationship: Coprime (relatively prime)")
        else if (a % gcd_val == 0 and b % gcd_val == 0) then:
            print("  Relationship: Share common factors")
        end
        print()
    end
end

fun collatz_sequence(n):
    print("=== Collatz sequence starting from", n, "===")

    sequence = [n]
    current = n
    steps = 0

    while (current != 1 and steps < 100):  // Limit to prevent infinite loops
        if (current % 2 == 0) then:
            current = trunc(current / 2)  // Ensure integer result
        else:
            current = 3 * current + 1
        end

        append(sequence, current)
        steps = steps + 1
    end

    if (len(sequence) <= 20) then:
        print("Full sequence:", sequence)
    else:
        // Show first 10 and last 10 terms
        first_10 = []
        last_10 = []

        for (i in range(10)):
            append(first_10, sequence[i])
        end

        for (i in range(len(sequence) - 10, len(sequence))):
            append(last_10, sequence[i])
        end

        print("First 10 terms:", first_10)
        print("Last 10 terms:", last_10)
    end

    print("Steps to reach 1:", steps)
    print("Maximum value reached:", max(sequence))
end

fun main():
    print("=== Number Theory Functions Demo ===")

    // Analyze individual numbers
    analyze_number(12)
    analyze_number(17)
    analyze_number(28)  // Perfect number

    // Generate and analyze primes
    generate_primes(50)

    // Fibonacci analysis
    fibonacci_analysis(15)

    // GCD and LCM demonstrations
    gcd_lcm_demo()

    // Collatz conjecture examples
    collatz_sequence(13)
    collatz_sequence(27)

    // Large number factorization
    print("=== Large number factorization ===")
    large_numbers = [1001, 2023, 4095]

    for (num in large_numbers):
        factors = prime_factors(num)
        print("Prime factors of", str(num) + ":", factors)

        // Verify factorization
        product = 1
        for (factor in factors):
            product = product * factor
        end
        print("Verification:", product, "==", num, "->", product == num)
        print()
    end

    // Perfect squares and cubes
    print("=== Perfect powers ===")
    print("Perfect squares up to 100:")
    squares = []
    for (i in range(1, 11)):
        square = i * i
        append(squares, square)
    end
    print(squares)

    print("Perfect cubes up to 1000:")
    cubes = []
    for (i in range(1, 11)):
        cube = i * i * i
        append(cubes, cube)
    end
    print(cubes)

    print("\n=== Number theory demo completed! ===")
end
